on:
  workflow_call:
    inputs:
      aws-region:
        description: AWS ECR Region where the Container Images maintained.
        type: string
        required: false
        default: 'us-east-1'
      image-tag:
        description: Container image tag
        type: string
        required: true
    secrets:
      aws-access-key-id:
        description: >
          AWS Access Key ID to sign programmatic requests to make to AWS. Caution: Use
          IAM access keys instead of root account access keys.
        required: true
      aws-secret-access-key:
        description: >
          AWS Secret Access Key to sign programmatic requests to make to AWS. Caution: Use
          IAM access keys instead of root account access keys.
        required: true
jobs:
  build-ecr-push:
    runs-on: ubuntu-latest

    steps:
    - run: sudo apt-get install jq

    - uses: actions/checkout@v3

    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - id: existing-ecr-repo
      run: |
        REPO_FOUND=$(aws ecr describe-repositories | jq 'any(.repositories[].repositoryName == "${{ github.repository }}"; .)')
        echo ::set-output name=found::${REPO_FOUND}

    - continue-on-error: true
      if: steps.existing-ecr-repo.outputs.found != 'true'
      run: aws ecr create-repository --repository-name ${{ github.repository }}

    - name: Build & Push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ github.repository }}
        IMAGE_TAG: ${{ inputs.image-tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
